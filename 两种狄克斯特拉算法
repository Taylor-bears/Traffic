vector<double> dist(number, INF); // 初始化所有距离为无穷大
vector<int> path(number, -1); // 初始化路径
vector<bool> S(number, false); // 标记数组，false表示未被访问
//下面是原Dijkstra所不具备的，主要是为了记录到该地后上次的信息
vector<times> arrival_time(number); // 记录到每个顶点的到达时间
vector<string> last_vehicle_type(number); // 记录到每个顶点最后乘坐的交通工具类型
vector<string> last_vehicle_name(number);

// 初始化从v出发到各点的距离和到达时间
for (int i = 0; i < number; i++) {
    if (i != v && edges[v][i].front().type!="") {
        vehicle minVehicle = getmin(edges[v][i], current_time, "", "");
        dist[i] = minVehicle.consume;
        S[i] = false;
        if (minVehicle.type != "MAX"&& minVehicle.type != "") {
            path[i] = v;
            arrival_time[i] = minVehicle.time2;
            last_vehicle_type[i] = minVehicle.type;
            last_vehicle_name[i] = minVehicle.name;
        }
        else {
            path[i] = -1;
        }
    }
}

dist[v] = 0; // 自己到自己的距离为0
S[v] = true; // 标记为已访问
arrival_time[v] = current_time; // 出发点的到达时间就是当前时间
double mindis;
int u = -1;

for (int i = 0; i < number - 1; i++) {
    mindis = INF;    
    for (int j = 0; j < number; j++) {
        if (S[j] == 0 && dist[j] < mindis) {
            u = j;
            mindis = dist[j];
        }
    }        
    S[u] = true;

    for (int j = 0; j < number; j++) {
        if (S[j] == 0 && !edges[u][j].empty()) {
            vehicle minVehicle = getmin(edges[u][j], arrival_time[u], last_vehicle_type[u], last_vehicle_name[u]);
            // Time_Dijkstra函数内部，当找到更短的路径时的代码段
            if (minVehicle.type != "MAX" && minVehicle.consume + dist[u] < dist[j]) {
                dist[j] = minVehicle.consume + dist[u];
                path[j] = u;
                arrival_time[j] = minVehicle.time2; // 确保这里的time2已经是考虑了等待时间后的到达时间
                last_vehicle_type[j] = minVehicle.type;
                last_vehicle_name[j] = minVehicle.name;
            }
        }
    }
}

dispaly(dist, path, S, v, n, arrival_time, last_vehicle_type);

void graph::Time_Dijkstra(int v, int n, times current_time) {
    //原来的算法是比较路径长度，而这里，比较不同的交通方式，是比较他的到达时间即可
    vector<vehicle> dist(number);
    vector<int> path(number);
    vector<int> S(number);

    vector<times> arrival_time(number);
    vector<string> vehicle_type(number);//第i次的交通类型
    vector<string> vehicle_name(number);//第i次的交通名称
    vector<vector<vehicle>> eachpath(number);

    for (int i = 0; i < number; i++) {             
            dist[i] = getmin(edges[v][i], current_time, "", "");//此时wait_hours 为0
            S[i] = 0;
            if (dist[i].consume != 0 && dist[i].consume < INF)
                path[i] = v;
            else
                path[i] = -1;
    }
    S[v] = 1;
    vehicle mindis;//注意比较的时候应当比较到达时间,我们要得到的也是最小的到达时间
    int u = -1;
    for (int i = 0; i < number - 1; i++) {
        mindis.time2 = times(INF,INF,INF);
        for (int j = 0; j < number; j++) 
            if (S[j] == 0 && timecheck(dist[j].time2 ,mindis.time2 ,0 )) {
                u = j;
                mindis = dist[j];
            }
        S[u] = 1; //此时选出的最小点不可更改
        //此时需要将最小的信息添加到上一信息当中，因为要对下一次的出发时间进行筛选
        arrival_time[i]=mindis.time2;
        vehicle_type[i]=mindis.type;
        vehicle_name[i]=mindis.name;

        if (path[u] != -1) {
            eachpath[u] = eachpath[path[u]]; // 继承上一个城市的最短路径信息
            eachpath[u].push_back(dist[u]); // 添加当前城市到该城市的最短路径信息
        }
        else {
            eachpath[u].push_back(dist[u]); // 如果是起点城市，则直接添加路径信息
        }

        //修改不在S中顶点的距离
        for (int j = 0; j < number; j++) 
            if (S[j] = 0) {
                vehicle dists = getmin(edges[u][j], arrival_time[i], vehicle_type[i], vehicle_name[i]);
                if (dists.consume < INF && timecheck( dists.time2, dist[j].time2, 0)) {
                    dist[j] = dists;
                    path[j] = u;
                }
            }
    }
    dispaly(dist, path, S, v, n, arrival_time, vehicle_type, vehicle_name);
}
